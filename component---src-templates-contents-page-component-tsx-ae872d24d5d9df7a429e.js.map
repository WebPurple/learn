{"version":3,"sources":["webpack:///./src/templates/contents-page/styles.ts","webpack:///./src/templates/contents-page/template.tsx","webpack:///./src/templates/contents-page/component.tsx","webpack:///./src/templates/utils/getContentsPagesNavRoot.ts"],"names":["ContentsGlobalStyle","createGlobalStyle","ContentsPageTemplate","title","location","MainWithNavigation","root","target","Loader","LogoLoader","pageQuery","ContentsPage","pageContext","data","markdownRemark","frontmatter","fields","slug","navRootPath","split","slice","join","getContentsPagesNavRoot","Layout","pageTitle","Aside"],"mappings":"22BAEA,IAmCeA,EAnCaC,YAAH,K,wBCeVC,EAV6C,SAAC,GAAwB,IAAtBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACpE,OACE,kBAACC,EAAA,EAAD,KACE,kBAAC,EAAD,MACA,4BAAKF,GACL,kBAAC,IAAD,CAAYG,KAAMF,EAAUG,OAAQH,EAAUI,OAAQC,Q,gDCuB/CC,GAFEC,UAtB4C,SAAC,GAQtD,IAPJC,EAOI,EAPJA,YAOI,IANJC,KACEC,eACiBX,EAIf,EAJAY,YAAeZ,MACCC,EAGhB,EAHAY,OAAUC,KAIRX,EClBO,SAACF,EAAkBQ,GAAnB,OACZA,GAAeA,EAAYM,aACzBd,EACAe,MAAM,KACNC,MAAM,GAAI,GACVC,KAAK,KAJR,IDiBaC,CAAwBlB,EAAUQ,GAE/C,OACE,kBAACW,EAAA,EAAD,CAAQC,UAAWrB,GACjB,kBAACsB,EAAA,EAAD,KACE,kBAAC,IAAD,MACA,kBAAC,IAAe,CAAEnB,OAAMC,OAAQH,EAAUI,OAAQC,OAEpD,kBAAC,EAAyB,CAAEN,QAAOG,OAAMF,eAOtB","file":"component---src-templates-contents-page-component-tsx-ae872d24d5d9df7a429e.js","sourcesContent":["import { createGlobalStyle } from 'styled-components';\n\nconst ContentsGlobalStyle = createGlobalStyle`\n  main {\n    text-align: center;\n    \n    .gatsby-dnmcl-nav {\n      text-align: center;\n      padding: 2rem;\n  \n      .gatsby-dnmcl-nav-link {\n        white-space: normal;\n        padding: 0;\n        font-weight: normal;\n\n        &_head {\n          display: none;\n        }\n  \n        &_to-page:before {\n          display: none;\n        }\n      }\n  \n      .gatsby-dnmcl-nav-list {\n        display: inline-block;\n        list-style: decimal;\n        font-size: 2.6rem\n  \n        &__item {\n          text-align: left;\n        }\n      }\n    }\n  } \n`;\n\nexport default ContentsGlobalStyle;\n","import React from 'react';\nimport MainWithNavigation from '../../components/MainWithNavigation';\nimport ContentsGlobalStyle from './styles';\nimport ContentsPageTemplateComponent from './interfaces';\nimport { Navigation } from 'gatsby-dynamical-navigation';\nimport LogoLoader from '../../components/LogoLoader';\n\nconst ContentsPageTemplate: ContentsPageTemplateComponent = ({ title, location }) => {\n  return (\n    <MainWithNavigation>\n      <ContentsGlobalStyle />\n      <h1>{title}</h1>\n      <Navigation root={location} target={location} Loader={LogoLoader} />\n    </MainWithNavigation>\n  );\n};\n\nexport default ContentsPageTemplate;\n","import React from 'react';\nimport { graphql } from 'gatsby';\nimport { Article, MarkdownPageProps } from '../interfaces';\nimport ContentsPageTemplate from './template';\nimport getContentsPagesNavRoot from '../utils/getContentsPagesNavRoot';\nimport Layout from '../../components/Layout';\nimport Aside from '../../components/Aside';\nimport { NavigationStyle } from '../../utils/dynamicalNavigation';\nimport { Navigation } from 'gatsby-dynamical-navigation';\nimport LogoLoader from '../../components/LogoLoader';\n\nconst ContentsPage: React.FC<MarkdownPageProps<Article>> = ({\n  pageContext,\n  data: {\n    markdownRemark: {\n      frontmatter: { title },\n      fields: { slug: location },\n    },\n  },\n}) => {\n  const root = getContentsPagesNavRoot(location, pageContext);\n\n  return (\n    <Layout pageTitle={title}>\n      <Aside>\n        <NavigationStyle />\n        <Navigation {...{ root, target: location, Loader: LogoLoader }} />\n      </Aside>\n      <ContentsPageTemplate {...{ title, root, location }} />\n    </Layout>\n  );\n};\n\nexport default ContentsPage;\n\nexport const pageQuery = graphql`\n  query contentsPageTemplate($id: String!) {\n    markdownRemark(id: { eq: $id }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\n","import { PageContext } from '../interfaces';\n\nexport default (location: string, pageContext?: PageContext): string =>\n  (pageContext && pageContext.navRootPath) ||\n  `${location\n    .split('/')\n    .slice(0, -2)\n    .join('/')}/`;\n"],"sourceRoot":""}